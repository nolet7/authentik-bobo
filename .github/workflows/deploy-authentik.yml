name: Build and Deploy Authentik

on:
  push:
    branches: [ main, develop, sre ]
    paths: 
      - 'helm/**'
      - 'docker-compose.yml'
      - 'nginx/**'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  VAULT_ADDR: http://192.168.0.116:8200
  DOCKER_USER: noletengine
  REGISTRY: docker.io
  IMAGE_NAME_PREFIX: noletengine/authentik

jobs:
  build-authentik:
    runs-on: self-hosted
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install Vault CLI
      run: |
        if ! command -v vault &> /dev/null; then
          sudo curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt-get install vault -y
        fi

    - name: Authenticate to Vault
      run: vault login ${{ secrets.VAULT_TOKEN }}
      env:
        VAULT_ADDR: http://192.168.0.116:8200

    - name: Pull secrets from Vault
      run: |
        echo "AUTHENTIK_SECRET_KEY=$(vault kv get -field=AUTHENTIK_SECRET_KEY secret/Dev-secret/authentik)" >> $GITHUB_ENV
        echo "POSTGRES_USER=$(vault kv get -field=POSTGRES_USER secret/Dev-secret/authentik)" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=$(vault kv get -field=PG_PASS secret/Dev-secret/authentik)" >> $GITHUB_ENV
        echo "DATABASE_URL=$(vault kv get -field=DATABASE_URL secret/Dev-secret/authentik)" >> $GITHUB_ENV
        echo "SMTP_HOST=$(vault kv get -field=SMTP_HOST secret/Dev-secret/authentik)" >> $GITHUB_ENV
        echo "SMTP_PORT=$(vault kv get -field=SMTP_PORT secret/Dev-secret/authentik)" >> $GITHUB_ENV
        echo "SMTP_USER=$(vault kv get -field=SMTP_USER secret/Dev-secret/authentik)" >> $GITHUB_ENV
        echo "SMTP_PASS=$(vault kv get -field=SMTP_PASS secret/Dev-secret/authentik)" >> $GITHUB_ENV
        echo "SMTP_USE_TLS=$(vault kv get -field=SMTP_USE_TLS secret/Dev-secret/authentik)" >> $GITHUB_ENV
      env:
        VAULT_ADDR: http://192.168.0.116:8200

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-server
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-worker
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-postgresql
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-redis
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-nginx
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push images
      run: |
        # Create .env file with secrets
        cat > .env << EOF
        AUTHENTIK_SECRET_KEY=${{ env.AUTHENTIK_SECRET_KEY }}
        POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
        POSTGRES_USER=${{ env.POSTGRES_USER }}
        SMTP_HOST=${{ env.SMTP_HOST }}
        SMTP_PORT=${{ env.SMTP_PORT }}
        SMTP_USER=${{ env.SMTP_USER }}
        SMTP_PASS=${{ env.SMTP_PASS }}
        DOMAIN_NAME=auth.yourdomain.com
        HOST_IP=192.168.0.2
        EOF
        
        # Extract branch and commit for tagging
        BRANCH=${GITHUB_REF#refs/heads/}
        COMMIT=${GITHUB_SHA:0:7}
        TAG="${BRANCH}-${COMMIT}"
        
        echo "Building with tag: $TAG"
        
        # Start containers
        docker-compose up -d
        sleep 30
        
        # Tag and push images
        docker commit authentik_server ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-server:$TAG
        docker commit authentik_worker ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-worker:$TAG
        docker commit authentik_postgresql ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-postgresql:$TAG
        docker commit authentik_redis ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-redis:$TAG
        docker commit authentik_nginx ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-nginx:$TAG
        
        # Push all images
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-server:$TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-worker:$TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-postgresql:$TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-redis:$TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-nginx:$TAG
        
        # Tag as latest for main branch
        if [ "$BRANCH" = "main" ]; then
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-server:$TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-server:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-worker:$TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-worker:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-postgresql:$TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-postgresql:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-redis:$TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-redis:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-nginx:$TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-nginx:latest
          
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-server:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-worker:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-postgresql:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-redis:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-nginx:latest
        fi
        
        # Cleanup
        docker-compose down
        
        # Output tag for next job
        echo "IMAGE_TAG=$TAG" >> $GITHUB_OUTPUT
      id: build

    - name: Update Helm values
      run: |
        cd helm/authentik-chart
        TAG="${{ steps.build.outputs.IMAGE_TAG }}"
        
        # Update all image tags in values.yaml
        sed -i "s/tag: \".*\"/tag: \"$TAG\"/" values.yaml
        
        # Commit and push changes
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add values.yaml
        git commit -m "Update image tags to $TAG [skip ci]" || exit 0
        git push

    - name: Deploy with ArgoCD
      run: |
        BRANCH=${GITHUB_REF#refs/heads/}
        
        case "$BRANCH" in
          "main")
            kubectl apply -f argocd/application-production.yaml
            APP_NAME="authentik-production"
            NAMESPACE="authentik-production"
            ;;
          "develop")
            kubectl apply -f argocd/application-staging.yaml
            APP_NAME="authentik-staging"
            NAMESPACE="authentik-staging"
            ;;
          "sre")
            kubectl apply -f argocd/application-sre.yaml
            APP_NAME="authentik-sre"
            NAMESPACE="authentik-sre"
            ;;
        esac
        
        echo "Deployed $APP_NAME to $NAMESPACE"
        
        # Wait and verify
        sleep 30
        kubectl get application $APP_NAME -n argocd || true
        kubectl get pods -n $NAMESPACE || true
