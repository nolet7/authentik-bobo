name: Build and Deploy Authentik with ArgoCD

on:
  push:
    branches: [ main, develop, sre ]
    paths:
      - 'helm/**'
      - 'docker/**'
      - 'docker-compose.yml'
      - 'nginx/**'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  VAULT_ADDR: http://192.168.0.116:8200
  VAULT_PATH: secret/Dev-secret/authentik
  DOCKER_USER: noletengine
  REGISTRY: docker.io
  IMAGE_NAME_PREFIX: noletengine/authentik

jobs:
  build-and-push:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    outputs:
      tag: ${{ steps.build.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install jq and Vault CLI
      run: |
        if ! command -v jq &>/dev/null; then
          sudo apt-get update && sudo apt-get install -y jq
        fi

        if ! command -v vault &>/dev/null; then
          VAULT_VERSION="1.15.2"
          wget -O vault.zip "https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip"
          unzip vault.zip
          sudo mv vault /usr/local/bin/vault
          sudo chmod +x /usr/local/bin/vault
          rm vault.zip
        fi

    - name: Import secrets from Vault
      run: |
        export VAULT_ADDR=${{ env.VAULT_ADDR }}
        export VAULT_TOKEN=${{ secrets.VAULT_TOKEN }}

        vault login -no-print -method=token token=$VAULT_TOKEN

        vault kv get -format=json ${{ env.VAULT_PATH }} | jq -r '.data.data | to_entries[] | "export \(.key)=\(.value)"' > vault.env
        source vault.env

        echo "AUTHENTIK_SECRET_KEY=$AUTHENTIK_SECRET_KEY" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> $GITHUB_ENV
        echo "POSTGRES_USER=$POSTGRES_USER" >> $GITHUB_ENV
        echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
        echo "SMTP_HOST=$SMTP_HOST" >> $GITHUB_ENV
        echo "SMTP_PORT=$SMTP_PORT" >> $GITHUB_ENV
        echo "SMTP_USER=$SMTP_USER" >> $GITHUB_ENV
        echo "SMTP_PASS=$SMTP_PASS" >> $GITHUB_ENV
        echo "SMTP_USE_TLS=$SMTP_USE_TLS" >> $GITHUB_ENV

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-server
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-worker
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-nginx
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push images
      id: build
      run: |
        cat > .env <<EOF
        AUTHENTIK_SECRET_KEY=${{ env.AUTHENTIK_SECRET_KEY }}
        POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
        POSTGRES_USER=${{ env.POSTGRES_USER }}
        DATABASE_URL=${{ env.DATABASE_URL }}
        SMTP_HOST=${{ env.SMTP_HOST }}
        SMTP_PORT=${{ env.SMTP_PORT }}
        SMTP_USER=${{ env.SMTP_USER }}
        SMTP_PASS=${{ env.SMTP_PASS }}
        SMTP_USE_TLS=${{ env.SMTP_USE_TLS }}
        EOF

        TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1 | cut -d: -f2)
        echo "Building containers with tag: $TAG"

        if command -v docker compose &>/dev/null; then
          docker compose up -d
        else
          docker-compose up -d
        fi

        sleep 30

        docker commit authentik_server ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-server:$TAG
        docker commit authentik_worker ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-worker:$TAG
        docker commit authentik_postgresql ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-postgresql:$TAG
        docker commit authentik_redis ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-redis:$TAG
        docker commit authentik_nginx ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-nginx:$TAG

        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-server:$TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-worker:$TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-postgresql:$TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-redis:$TAG
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-nginx:$TAG

        echo "tag=$TAG" >> $GITHUB_OUTPUT

  update-helm-values:
    needs: build-and-push
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4

    - name: Update Helm values
      run: |
        cd helm/authentik-chart
        TAG=${{ needs.build-and-push.outputs.tag }}
        sed -i "s/tag: .*/tag: \"$TAG\"/" values.yaml
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
        git add values.yaml
        git commit -m "Update tag to $TAG" || true
        git push

  deploy-with-argocd:
    needs: [build-and-push, update-helm-values]
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4

    - name: Apply ArgoCD App
      run: |
        kubectl apply -f argocd/application.yaml
        sleep 30

    - name: Verify Deployment
      run: |
        kubectl get application authentik -n argocd -o yaml
        kubectl get pods -n authentik
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=authentik -n authentik --timeout=300s || true
